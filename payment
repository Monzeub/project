@app.post("/payment")
async def register_pey(payload: Request):
    
values_dict = await payload.json()

 

dbase = sqlite3.connect('API_database.db', isolation_level=None)

referencenumber = ('''
SELECT * FROM Invoice
WHERE Client_id = {clientid}
AND Paid = {paid}
'''.format(clientid =str(values_dict['clientid']),paid = 0))
print(referencenumber)




querycard = dbase.execute('''
SELECT credit_cardid FROM Creditcard
WHERE Clientid = {clientid}
'''.format(clientid=str(values_dict['client_id'])))

query_card = querycard.fetchall()[0][0]


N = 0 
Liste = [] 
While query_card != 0 : 
     A = query_card % 10 
     Liste.insert (N, A)  
#N : position Rem : si numéro de carte dans le bon sens --> N = -1 et N = N-1 
# cartes commencent par 0 ?  
      N = N + 1 
      query_card = (query_card – A) / 10 
checking_digit = Liste [0]  
#dernier chiffre de la carte (premier de la liste) 
del Liste [0] 
Last_check = 0 
for i in Liste : 
#i c’est la valeur 
# liste.index(i) --> c’est la position dans la liste  
      if Liste.index(i) % 2 == 0 : 
            double = i * 2 
            If double >= 9 : 
                  add = double – 9 
            Else: 
                  add = double 
            Last_check = Last_check + add 
      Else:  
            Last_check = Last_check 
Validity = Last_check + checking_digit 
if Validity % 10 == 0: 
      Print (“The credit card is valid!”) 
    validitycard = dbase.execute(''' 
UPDATE Invoice
SET Paid = 1
WHERE credit_cardid = {creditcardid}
AND Invoice.id = {Referencenumber}
'''.format(creditcardid = str(query_card), Referencenumber = str(values_dict['referencenumber'])))

else: 
      Print (“The credit card is not valid!”)




validitycard = dbase.execute(''' 
UPDATE Invoice
SET Paid = 1
WHERE credit_cardid = {creditcardid}
AND Invoice.id = {Referencenumber}
'''.format(creditcardid = str(query_card), Referencenumber = str(values_dict['referencenumber'])))

if _name_ == '_main_':
  uvicorn.run(app, host='127.0.0.1', port=8000)

